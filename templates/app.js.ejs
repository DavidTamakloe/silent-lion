var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var requestLogger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
const session = require("express-session");
const MongoStore = require("connect-mongo")(session);
const flash = require("connect-flash");
const mongoose = require("mongoose");


var app = express();

const logger = require("./config/log.js")();

//MongoDB Connection
mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGODB_URI,{useMongoClient:true});
const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error:"));
db.once("open", function() {
	console.log("connected to mongo!");
});



// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));

if (process.env.NODE_ENV !== "test") {
	app.use(
		requestLogger("dev", {
			skip: function(req, res) {
				//don't log requests to static files unless they're errors
				return (
					(req.originalUrl.startsWith("/stylesheets") ||
						req.originalUrl.startsWith("/javascripts") ||
						req.originalUrl.startsWith("/images") ||
						req.originalUrl.startsWith("/fonts")) &&
					res.statusCode < 400
				);
			}
		})
	);
}

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(
	session({
		secret: "todo:changethisstringasap",
		name: "sessionId",
		saveUninitialized: true,
		rolling: true,
		resave: true,
		cookie: {
			maxAge: 3600000
		},
		store: new MongoStore({
			mongooseConnection: mongoose.connection
		})
	})
);
app.use(flash());
app.use(express.static(path.join(__dirname, 'public')));

//setup routes
require("./routes")(app);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

/* error handlers */

// development error handler
// will print stacktrace
if (app.get("env") === "development") {
	//eslint-disable-next-line
	app.use(function(err, req, res, next) {
		logger.error("error status: " + err.status);
		res.status(err.status || 500);
		if (err.status === 404) {
			logger.error("requested url: " + req.originalUrl);
			return res.render("errors/404", {
				message: err.message,
				error: err
			});
		}
		logger.error("From ErrorHandler:", err);
		res.render("errors/500", {
			message: err.message,
			error: err
		});
	});
}

// production error handler
// no stacktraces leaked to user
//eslint-disable-next-line
app.use(function(err, req, res, next) {
	logger.error("error status: " + err.status);

	res.status(err.status || 500);
	if (err.status === 404) {
		logger.error("requested url: " + req.originalUrl);
		return res.render("errors/404", {
			message: "",
			error: ""
		});
	}
	logger.error("From ErrorHandler:", err);
	res.render("errors/500", {
		message: "",
		error: ""
	});
});

module.exports = app;
